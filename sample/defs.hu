@{ app: boma, boma-version: 1.0.0 }
{
    config: {
        c++: {
            args: "-I./test"
            includeFiles: [
                //{ file: humon.h, system: true }
                sample.hpp
            ]
            outputPaths: {
                header: gen-cpp/inc/og.hpp
                source: 'gen-cpp/src/*.cpp'
                inline: gen-cpp/inc/inl/_*.inl.hpp
            }
            settings: {
                namespace: og
                const: east
                noexcept: true
                headerOnly: false
                cavepersonCtrs: true
            }
            features: {
                defaultConstructible: true
                memberwiseConstructible: true
                virtualDestructor: true
            }
            modifiers: {    // these modify value strings before extracting their value
                *: { case: toUpper }
                og.VkImageViewType: { prefix: VK_IMAGE_VIEW_TYPE_ }
                og.VkComponentSwizzle: { prefix: VK_COMPONENT_SWIZZLE_ }
                og.VkImageAspectFlagBits: { prefix: VK_IMAGE_ASPECT_ flags: true }
                og.VkFormat: { prefix: VK_FORMAT_ }
                og.VkColorSpaceKHR: { prefix: VK_COLOR_SPACE_ postfix: _KHR }
                og.VkSurfaceTransformFlagBitsKHR: { prefix: VK_SURFACE_TRANSFORM_ postfix: _BIT_KHR flags: true }
                og.VkCompositeAlphaFlagBitsKHR: { prefix: VK_COMPOSITE_ALPHA_ postfix: _BIT_KHR flags: true }
                og.VkPresentModeKHR: { prefix: VK_PRESENT_MODE_ }
            }
        }
    }

    pods: {
        general: {
            programName: string
            version: { type: array, of: ["unsigned int", 3] }
            numWorkers: "unsigned int"
        }

        assetDb: {
            dbPath: string
            cacheDir: string
            cacheFile: string
            cacheMapWindowSize: "unsigned int"    // in MB
        }

        swapchainImageView: {
            viewType: og.VkImageViewType
            components: { type: array of: [og.VkComponentSwizzle 4] }
            aspectMask: og.VkImageAspectFlagBits
        }

        swapchain: {
            formatPriorities: { 
                type: vector of: [ {
                        type: pair of: [
                            og.VkFormat
                            og.VkColorSpaceKHR
                        ]
                    }
                ]
            }
            numViews: "unsigned int"
            imageUsages: { type: vector of: string }
            imageSharing: bool
            pretransform: og.VkSurfaceTransformFlagBitsKHR
            windowAlpha: og.VkCompositeAlphaFlagBitsKHR
            presentModePriorities: {
                type: vector of: [ {
                        type: pair of: [
                            og.VkPresentModeKHR
                            uint32_t
                        ]
                    }
                ]
            }
            clipped: bool
            imageView: swapchainImageView
        }

        graphics: {
            isConfigured: bool
            headless: bool
            fullscreen: bool
            width: "unsigned int"
            height: "unsigned int"
            vulkanValidationEnabled: bool
            vulkanValidationLayers: { type: vector of: string }
            vulkanValidationReports: { type: vector of: string }
            vulkanExtensions: { type: vector of: string }
            deviceExtensions: { type: vector of: string }
            minGraphicsQueues: "unsigned int"
            desiredGraphicsQueues: "unsigned int"
            minComputeQueues: "unsigned int"
            desiredComputeQueues: "unsigned int"
            minTransferQueues: "unsigned int"
            desiredTransferQueues: "unsigned int"
            minDeviceFeatures: { type: vector of: string }
            desiredDeviceFeatures: { type: vector of: string }
            swapchain: swapchain
        }

        config: {
            general: general
            assetDb: assetDb
            graphics: graphics            
        }
    }
}
