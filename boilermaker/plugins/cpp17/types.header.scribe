$<join for t in $types>
------------------ Building $typeHeaderPath.
$<out $typeHeaderPath>$+
#pragma once

$headerTopComment

#include "$<$getRelativePath($headerDir, $commonHeaderPath)>"
$+  $<if $diffable>
#include "$<$getRelativePath($headerDir, $diffsHeaderPath)>"
#include <bitset>
$+  $<endif>$+

$+  $<join for inc in $t.dependencyIncludes>
#include $inc
$+  $<endjoin>$''

$+
$<set scope as $sharedCodeNamespaceForCode>
namespace $sharedCodeNamespaceForCode
{
    $+  $<join for subtype in $t.subtypesWithIsLess()>
    struct IsLess_$<$subtype.name>;
    $+  $<endjoin>

    $<join for subtype in $t.subtypesWithIsLess()>
    // IsLess template argument for $<$subtype.codeDecl>
    struct IsLess_$<$subtype.name>
    {
        bool operator()($<$const($rescope($subtype.subtypes[0]))> & lhs, $<$const($rescope($subtype.subtypes[0]))> & rhs) const;
    };
    $+  $<endjoin>

    $+  $<join for subtype in $t.allVariantSubtypes()>
    template <$>
    struct VariantTypeNames<$<$rescope($subtype)>>
    {
        static constexpr $<$const('char')> * names[] = { $+
            $<join for subsubtype in $subtype.subtypes>$+
                $<if $subsubtype.aliases>"$<$subsubtype.aliases>"$+
                $<else>"$<$subsubtype.type>"$<endif>$<delim>, $<endjoin> };
        static constexpr std::size_t size = $<len($subtype.subtypes)>;
    };
    $+  $<endjoin>
}$<endset>
$<set scope as $namespaceForCode>
namespace $namespaceForCode
{
    $classOrStruct $<$rescope($t)>;
    $+  $<if $swap>
    void swap($<$rescope($t)> & lhs, $<$rescope($t)> & rhs) noexcept;
    $<endif>$''$+
    $<if 'humon' in $serializeTo>$+
    std::ostream & operator <<(std::ostream & out, $<$const($rescope($sharedCodeNamespaceForCode + '::HumonFormat<' + $rescope($t) + '$>', $scope))> & obj);
    $<endif>$''$+
    $<if 'binary' in $serializeTo>$+
    std::ostream & operator <<(std::ostream & out, $<$const($rescope($sharedCodeNamespaceForCode + '::BinaryFormat<' + $rescope($t) + '$>', $scope))> & obj);
    $<endif>$''$+
    $<if $comparable>
    bool operator ==($<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs);
    bool operator !=($<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs);
    $<endif>
    $+
$<endset>
$<if $diffable>
}

$+  $<set scope as $sharedCodeNamespaceForCode>
namespace $sharedCodeNamespaceForCode
{
    template<>
    struct Diff<$<$rescope($t)>>
    {
        $+  $<if len($t.members) $> 0>
        enum class Members : std::size_t
        {
            $+  $<join for member in $t.members>$+
            $<$member.name>,$<delim>
            $<endjoin>
            numMembers
        };

        Diff();
        Diff($<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs);

        std::bitset<static_cast<std::size_t>(Members::numMembers)> memberDiffs;
        $<endif>$+
        $<join for member in $t.members>
        Diff<$<$rescope($member.type)>> $<$member.name>_diffs;$<endjoin>
    };
}
$<endset>
namespace $namespaceForCode
{
    $+  $<endif>
$<set scope as $namespaceForCode>

    $<$classOrStruct> $<$t.codeDecl>$<if len($t.baseTypeDecl) $> 0> : public $<$t.baseTypeDecl>$<endif>
    {
    $<if $classOrStruct == 'class'>$+
    public:
    $<endif>    $+
    $<if $defaultConstructible>$+
        $<$t.codeDecl>();
    $<endif>    $+
    $<if $memberwiseConstructible>
        $<$t.codeDecl>($+
        $<join for member in $t.members>$+
            $<$const($rescope($member.type))> & $<$member.name>$<delim>, $+
        $<endjoin>$+
            );
    $<endif>    $+
    $<if 'humon' in $deserializeFrom>
        $<$t.codeDecl>($<$const('hu::Node')> & node);
    $<endif>    $+
    $<if 'binary' in $deserializeFrom>
        $<$t.codeDecl>($<$const('char *')> & buffer, std::size_t & size);
    $<endif>    $+
    $<if $copy != 'omit'>$+
        $<$t.codeDecl>($<$const($rescope($t))> & rhs)$+
        $<if $copy == 'default'> = default;
        $<elif $copy == 'delete'> = delete;
        $<elif $copy == 'inline'>$''
         : $<if len($t.baseTypeDecl) $> 0>$<$t.baseTypeDecl>(rhs), $<endif> $+
           $<join for member in $t.members>$<$member.name>(rhs.$<$member.name>)$<delim>, $<endjoin>
        { }

        $<else>
            ;
        $<endif>$+
    $<endif>    $+
    $<if $move != 'omit'>$+
        $<$t.codeDecl>($<$rescope($t)> && rhs)$+
        $<if $move == 'default'>$'' noexcept = default;$+
        $<elif $move == 'delete'>$''  = delete;$+
        $<elif $move == 'inline'>$'' noexcept$+
            $<if $useCopySwap>$''
         : $<if len($t.baseTypeDecl) $> 0>$<$t.baseTypeDecl>(rhs), $<endif> $+
           $<$t.name>()
        {
            swap(*this, rhs);
        }
$+            $<else>$''
         : $<if len($t.baseTypeDecl) $> 0>$<$t.baseTypeDecl>(rhs), $<endif> $+
           $<join for member in $t.members>$<$member.name>(std::move(rhs.$<$member.name>))$<delim>, $<endjoin>
        { }
$+
            $<endif>
        $<else>$'' noexcept;$+
        $<endif>$+
    $<endif>    $+
    $<if $copy != 'omit'>$+
        $<if $useCopySwap>$''
        $<$rescope($t)> & operator =($<$rescope($t)> rhs)$+
            $<if $copy == 'inline'>$''
        {
            swap(*this, rhs);
            return * this;
        }$+
            $<else>
                ;$+
            $<endif>
        $<else>$''
        $<$rescope($t)> & operator =($<$const($rescope($t))> & rhs)$+
            $<if $copy == ' = default'>default;
$+            $<elif $copy == ' = delete'>delete;
$+            $<elif $copy == 'inline'>$''
        {
            if (this != & rhs)
            {
$+              $<join for member in $t.members>$+
$''                $<$member.name> = rhs.$<$member.name>;
$+              $<endjoin>
$''            }
            return * this;
        }
$+          $<else>
                ;
$+          $<endif>$+
        $<endif>
    $<endif>$''$+

    $<if $move != 'omit' and $useCopySwap == False>$+
$''        $<$rescope($t)> & operator =($<$rescope($t)> && rhs)$+
        $<if $move == 'default'>$' 'noexcept = default;$+
        $<elif $move == 'delete'>$' ' = delete;$+
        $<elif $move == 'inline'>$'' noexcept
        {
$+          $<join for member in $t.members>$+
$''            $<$member.name> = std::move(rhs.$<$member.name>);
$+          $<endjoin>
$''            return * this;
        }
$+            $<else>$' 'noexcept;$+
        $<endif>$+

    $<endif>$''$+
    $<if $destructor != 'omit'>$+
        $<if $virtualDestructor>$''
        virtual $+
        $<endif>$''
        ~$<$t.codeDecl>()$+
        $<if $destructor == 'default'>$' '= default$+
        $<elif $destructor == 'delete'>$' '= delete$+
        $<elif $destructor == 'inline'>$' '{ }
        $<else>;
        $<endif>$+
    $<endif>    $+
    $<if $swap>
        friend void swap($<$rescope($t)> & lhs, $<$rescope($t)> & rhs) noexcept;$+
    $<endif>$''    $+
    $<set maxLen as max([len($rescope(m.type)) for m in $t.members.values()] or [0])>
    $<join for member in $t.members>$''
        $+  $<if 'returnByValue' in $getterVariants>
        $<fmt left $maxLen + 6>$<$rescope($member.type)>$<endfmt>   get_$<$member.name>() && $+
            $<if $inlineGetters>$''     { return $<$member.name>; }$+
            $<else>$+
        ;$+
            $<endif>$+
        $<endif>$''
        $+  $<if 'returnByConstRef' in $getterVariants>
        $<fmt left $maxLen + 6>$<$const($rescope($member.type))>$<endfmt> & get_$<$member.name>() const & $+
            $<if $inlineGetters>$''{ return $<$member.name>; }$+
            $<else>$+
        ;$+
            $<endif>$+
        $<endif>$''
        $+  $<if 'returnByNonconstRef' in $getterVariants>
        $<fmt left $maxLen + 6>$<$rescope($member.type)>$<endfmt> & get_$<$member.name>() & $+
            $<if $inlineGetters>$''      { return $<$member.name>; }$+
            $<else>$+
        ;$+
            $<endif>$+
        $<endif>$''$+
    $<endjoin>$''$+
    $+  $<join for member in $t.members>$''
        $+  $<if $setByCopy and $movable>
        void set_$<$member.name>($<$rescope($member.type)> new_$<$member.name>)$+
            $<if $inlineSetters>$''$<#fmt left $maxLen - len($member.type.codeDecl) + 3>$<#endfmt> { $+
                $<if $useCopySwap>using std::swap; swap($<$member.name>, new_$<$member.name>);$+
                $<else>$<$member.name> = std::move(new_$<$member.name>);$+
                $<endif> $+
                    $' '}$+
            $<else>;$+
            $<endif>$+
        $<elif $setByCopy and not $movable>
        void set_$<$member.name>($<if not $useCopySwap>$<$const($rescope($member.type))>$<else>$<$rescope($member.type)>$<endif> & new_$<$member.name>)$+
            $<if $inlineSetters>$''$<#fmt left $maxLen - len($member.type.codeDecl) + 3>$<#endfmt> { $+
                $<if $useCopySwap>using std::swap; swap($<$member.name>, new_$<$member.name>);$+
                $<else>$<$member.name> = new_$<$member.name>;$+
                $<endif> $+
                    $' '}$+
            $<else>;$+
            $<endif>$+
        $<endif>$''
        $+  $<if $setByMove>
        void set_$<$member.name>($<$rescope($member.type)> && new_$<$member.name>)$+
            $<if $inlineSetters>$''$<#fmt left $maxLen - len($member.type.codeDecl)>$<#endfmt> { $+
                $<if $useCopySwap>using std::swap; swap($<$member.name>, new_$<$member.name>);$+
                $<else>$<$member.name> = std::move(new_$<$member.name>);$+
                $<endif> $+
                    $' '}$+
            $<else>;$+
            $<endif>$+
        $<endif>$+
    $<endjoin>$''
    $<endset>    $+
    $<if 'humon' in $serializeTo>    $+
        friend std::ostream & operator <<(std::ostream & out, $<$const($rescope($sharedCodeNamespaceForCode + '::HumonFormat<' + $rescope($t) + '$>', $scope))> & obj);$+
    $<endif>$''$+
    $<if 'binary' in $serializeTo>    $+
        friend std::ostream & operator <<(std::ostream & out, $<$const($rescope($sharedCodeNamespaceForCode + '::BinaryFormat<' + $rescope($t) + '$>', $scope))> & obj);$+
    $<endif>$''$+
    $<if $comparable>    $+
        friend bool operator ==($<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs);
        friend bool operator !=($<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs);$+
    $<endif>$''
        $+
    $<if $diffable>
        friend $<$rescope($sharedCodeNamespaceForCode + '::Diff<' + $rescope($t) + '$>', $scope)>::Diff();
        friend $<$rescope($sharedCodeNamespaceForCode + '::Diff<' + $rescope($t) + '$>', $scope)>::Diff($+
            $<set scope as ''>
            $<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs);$+
            $<endset>
    $<endif>$''
    $+  $<if $privateMembers>
    private:$+
    $<endif>$''
    $<join for member in $t.members>    $+
        $<$rescope($member.type)> $<$member.name>$+
        $<if len($member.defaultValue) $> 0>$'' = $<$member.defaultValue>$<endif>;
    $<endjoin>$''$+
    };
$<endset>$+
$<if 'humon' in $deserializeFrom>$+
}
    $<set scope as 'hu'>
namespace hu
{
    template<>
    struct val<$<$rescope($t)>>
    {
        static inline $<$rescope($t)> extract($<$const('Node')> & node)
        {
            return $<$rescope($t)>(node);
        }
    };
}
    $<endset>
namespace $namespaceForCode
{
    $<endif>$+
$<set scope as $namespaceForCode>
    $+  $<if 'binary' in $deserializeFrom>
    template <$>
    struct BinaryReader<$<$rescope($t)>$>
    {
        static inline $<$rescope($t)> extract($<$const('char *')>& buffer, std::size_t & size)
        {
            return $<$rescope($t)>(buffer, size);
        }
    };
$+    $<endif>$+
$<endset>$''
}
$+
$<endout>
$<endjoin>
