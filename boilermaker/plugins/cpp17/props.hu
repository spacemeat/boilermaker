@{ app: boma, boma-version: 0.0.4 }
{
    inherit:        boilermaker

    language:       c++
    languageVersion: 17
    run: {
        name:           cpp17
        plugin:         cpp17
        provider:       provider
        output:         output
        ops:            { createCppProps: 7,
                          generateCode: 9 }
    }

    projectNamespace:           $namespace
    projectNamespaceForFs:      $<$nsToFs($projectNamespace)>
    projectNamespaceForCode:    $<$nsToCode($projectNamespace)>

    sharedCodeNamespace:        $projectNamespace
    sharedCodeNamespaceForFs:   $<$nsToFs($sharedCodeNamespace)>
    sharedCodeNamespaceForCode: $<$nsToCode($sharedCodeNamespace)>
    sharedCodeGenDir:           $baseDir/gen/$sharedCodeNamespaceForFs
    sharedCodeHeaderDir:        $sharedCodeGenDir/inc
    sharedCodeInlineDir:        $sharedCodeGenDir/inc/inl
    sharedCodeSourceDir:        $sharedCodeGenDir/src

    namespace:                  boma
    namespaceForFs:             $<$nsToFs($namespace)>
    namespaceForCode:           $<$nsToCode($namespace)>

    genDir:                 $baseDir/gen/$namespaceForFs

    headerDir:              $genDir/inc
    inlineDir:              $genDir/inc/inl
    sourceDir:              $genDir/src

    mainHeaderFile:         $namespaceForFs.hpp
    commonHeaderFile:       common.hpp
    commonInlineFile:       common.inl.hpp
    commonSourceFile:       common.cpp
    diffsHeaderFile:        diffs.hpp
    enumsHeaderFile:        enums.hpp
    enumsInlineFile:        enums.inl.hpp
    enumsSourceFile:        enums.cpp
    typeHeaderFile:         $<$t.name>.hpp
    typeInlineFile:         $<$t.name>.inl.hpp
    typeSourceFile:         $<$t.name>.cpp

    mainHeaderPath:         $sharedCodeHeaderDir/$mainHeaderFile
    commonHeaderPath:       $sharedCodeHeaderDir/$commonHeaderFile
    commonInlinePath:       $sharedCodeInlineDir/$commonInlineFile
    commonSourcePath:       $sharedCodeSourceDir/$commonSourceFile
    diffsHeaderPath:        $sharedCodeHeaderDir/$diffsHeaderFile
    enumsHeaderPath:        $sharedCodeHeaderDir/$enumsHeaderFile
    enumsInlinePath:        $sharedCodeInlineDir/$enumsInlineFile
    enumsSourcePath:        $sharedCodeSourceDir/$enumsSourceFile
    typeHeaderPath:         $headerDir/$typeHeaderFile
    typeInlinePath:         $inlineDir/$typeInlineFile
    typeSourcePath:         $sourceDir/$typeSourceFile

    constStyle:     west
    checkBinaryOverruns: true

    generatedFileComment: `/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes.`

    mainHeaderTopComment: `$generatedFileComment

    #include this header in your project to use boilermaker-generated code.*/`

    headerTopComment: `$generatedFileComment */`
    inlineTopComment: `$generatedFileComment */`
    sourceTopComment: `$generatedFileComment */`

    // [ctr, dtr, ass, serializeBinary, deserializeBinary]
    caveperson:    ['deserializeBinary']
    caveStream:     `std::cerr`

    classOrStruct:  'class'
    outputForm:     compiled  // or headerOnly, or anything else in outupt
    deserializeFrom: [humon] // also accepts binary
    defaultConstructible: false
    memberwiseConstructible: false
    destructor: source
    virtualDestructor: false
    privateMembers: true
    swap: $useCopySwap
    useCopySwap: false  // requires copy, defaultMoveConstructible, destructor!='omit'
    copyable: true
    copy: source        // one of: omit, default, delete, inline, source
    movable: true       // i think requires virtualDestructor to be false
    move: source        // one of: omit, default, delete, inline, source
    getters: '$<len($getterVariants) > 0>'
    getterVariants: [ returnByValue returnByConstRef returnByNonconstRef ]
    getterRefVariants: [ ref, rvaleRef ]    // &, && variants
    inlineGetters: true     // requires getters
    constGetters: true      // requires getters
    nonConstGetters: true   // requires getters, privateMembers
    setters: true
    inlineSetters: true // requires setters
    setByCopy: true // requires copyable
    setByMove: true   // requires movable
    serializeTo: []
    comparable: true
    diffable: false  // requires comparable
}
