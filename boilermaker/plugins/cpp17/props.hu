@{ app: boma, boma-version: 0.0.4 }
{
    inherit:        boilermaker

    language:       c++
    languageVersion: 17
    run: {
        plugin:         $cpp17Plugin
        provider:       $cpp17Provider
        output:         $cpp17Scribe
        ops:            { createCppProps: $cpp17CreatePropsSequence,
                          generateCode: $cpp17GenerateCodeSequence }
        generateCode:   $cpp17GenerateCode
    }

    cpp17Plugin:    cpp17
    cpp17Provider:  provider
    cpp17Scribe:    output
    cpp17CreatePropsSequence: 7
    cpp17GenerateCodeSequence: 9
    cpp17GenerateCode: $generateOutput

    cave:           ['deserializeBinary']

    constStyle:     west
    outputForm:     compiled  // or headerOnly, or anything else in outupt
    caveperson:     []// [ctr, dtr, ass, serializeBinary, deserializeBinary]
    checkBinaryOverruns: true
    caveStream:     `std::cerr`

    classOrStruct:  'class'

    generatedFileComment: `/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes.`

    mainHeaderTopComment: `$generatedFileComment

    #include this header in your project to use boilermaker-generated code.*/`

    headerTopComment: `$generatedFileComment */`
    inlineTopComment: `$generatedFileComment */`
    sourceTopComment: `$generatedFileComment */`

    deserializeFrom: [humon] // also accepts binary
    defaultConstructible: false
    memberwiseConstructible: false
    virtualDestructor: false
    privateMembers: true
    swap: '$<$copyByCopySwap or $moveByCopySwap>'
    copyByCopySwap: true    // requires swap and copyable
    moveByCopySwap: true    // requires swap and copyable
    copyable: true
    copy: moveMembers      // [omit | default | delete | swap | moveMembers | copyMembers]
    movable: true       // i think requires virtualDestructor to be false
    getters: '$<$inlineGetters or $constGetters or $nonConstGetters>'
    getterVariants: [ returnByValue | returnByConstRef | returnByNonconstRef ]
    getterRefVariants: [ ref, rvaleRef ]    // &, && variants
    inlineGetters: true     // requires getters
    constGetters: true      // requires getters
    nonConstGetters: true   // requires getters, privateMembers
    setters: true
    inlineSetters: true // requires setters
    setByCopy: true // requires copyable
    setByMove: true   // requires movable
    serializeTo: []
    comparable: true
    diffable: false  // requires comparable

    headerDir:              $baseDir/gen-cpp/$namespace/inc
    inlineDir:              $baseDir/gen-cpp/$namespace/inc/inl
    sourceDir:              $baseDir/gen-cpp/$namespace/src
    mainHeaderFile:         $namespace.hpp
    commonHeaderFile:       common.hpp
    commonInlineFile:       common.inl.hpp
    commonSourceFile:       common.cpp
    diffsHeaderFile:        diffs.hpp
    enumsHeaderFile:        enums.hpp
    enumsInlineFile:        enums.inl.hpp
    enumsSourceFile:        enums.cpp
    typeHeaderFile:         $<$t.name>.hpp
    typeInlineFile:         $<$t.name>.inl.hpp
    typeSourceFile:         $<$t.name>.cpp

    mainHeaderPath:         $headerDir/$mainHeaderFile
    commonHeaderPath:       $headerDir/$commonHeaderFile
    commonInlinePath:       $inlineDir/$commonInlineFile
    commonSourcePath:       $sourceDir/$commonSourceFile
    diffsHeaderPath:        $headerDir/$diffsHeaderFile
    enumsHeaderPath:        $headerDir/$enumsHeaderFile
    enumsInlinePath:        $inlineDir/$enumsInlineFile
    enumsSourcePath:        $sourceDir/$enumsSourceFile
    typeHeaderPath:         $headerDir/$typeHeaderFile
    typeInlinePath:         $inlineDir/$typeInlineFile
    typeSourcePath:         $sourceDir/$typeSourceFile
}
