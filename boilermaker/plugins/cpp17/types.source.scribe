$+  $<join for t in $types>
$<out $typeSourcePath>

$sourceTopComment

#include "$srcToHeader/$typeHeaderFile"
#include "$srcToHeader/$enumsHeaderFile"
#include <iostream>

$<set scope as $scope + '::' + $namespace>
namespace $namespace
{
    $+  $<if $defaultConstructible>
    $<$rescope($t)>::$<$t.name>()
    {
    }

    $<endif>$''$+
    $<if $memberwiseConstructible>
    $<$rescope($t)>::$<$t.name>($+
        $<join for member in $t.members>$+
        $<$const($rescope($member.type))> & $<$member.name>$<delim>, $<endjoin>$+
        )
     : $+
       $<join for member in $t.members>$<$member.name>($<$member.name>)$<delim>, $<endjoin>
    {
    }

    $<endif>$''$+
    $<if 'humon' in $deserializeFrom>
    $<$rescope($t)>::$<$t.name>($<$const('hu::Node')> & node)
     : $<join for member in $t.members>$<$member.name>(node / "$<$member.name>" % hu::val<$<$rescope($member.type)>>{})$<delim>,
       $<endjoin>
    {
    }

    $<endif>$''$+
    $<if 'binary' in $deserializeFrom>
    $<$rescope($t)>::$<$t.name>($<$const('char *')> & buffer, std::size_t & size)
     : $<join for member in $t.members>$<$member.name>(BinaryReader<$<$rescope($member.type)>>::extract(buffer, size))$<delim>,
       $<endjoin>
    {
    }

    $<endif>$''$+
    $<if $copy == 'source'>
        $<if $copyByCopySwap == False>
    $<$rescope($t)>::$<$t.name>($<$const($rescope(t))> & rhs)
     : $<join for member in $t.members>$<$member.name>(rhs.$member.name>)$<delim>, $<endjoin>
    {
    }$+ $<else>
    {
        using std::swap;$<join for member in $t.members>
        swap($<$member.name>, rhs.$<$member.name>);$<endjoin>
    }$+ $<endif>

    $<endif>$''$+
    $<if $move == 'source'>
        $<if $moveByCopySwap == False>
    $<$rescope($t)>::$<$t.name>($<$t.name> && rhs) noexcept
     : $<join for member in $t.members>$<$member.name>(std::move(rhs.$member.name>))$<delim>, $<endjoin>
    {
    }$+ $<else>
    {
        using std::swap;$<join for member in $t.members>
        swap($<$member.name>, rhs.$<$member.name>);$<endjoin>
    }$+ $<endif>

    $<endif>$''$+
    $<if $copy == 'source'>
    $<$t.name> & $<$rescope($t)>::operator =($<$const($rescope(t))> & rhs)
    {
        $+  $<if $copyByCopySwap == False>
                $<join for member in $t.members>
        $<$member.name> = rhs.$<$member.name>;$+
                $<endjoin>
            $<else>
        using std::swap;$+
                $<join for member in $t.members>
        swap($<$member.name>, rhs.$<$member.name>);
            $<endjoin>
        $<endif>
        return * this;
    }

    $<endif>$''$+
    $<if $move == 'source'>
    $<$t.name> & $<$rescope($t)>::operator =($<$rescope(t)> && rhs)
    {
        $+  $<if $moveByCopySwap == False>
                $<join for member in $t.members>
        $<$member.name> = std::move(rhs.$<$member.name>);
                $<endjoin>
            $<else>
        using std::swap;
                $<join for member in $t.members>
        swap($<$member.name>, rhs.$<$member.name>);
                $<endjoin>
            $<endif>
        return * this;
    }

    $<endif>$''$+
    $<if $destructor == 'source'>
    $<$rescope($t)>::~$<$t.name>()
    {
    }

    $<endif>$''$+
    $<if $swap>
    void swap($<$t.name> & lhs, $<$t.name> & rhs) noexcept
    {
        using std::swap;$<join for member in $t.members>
        swap(lhs.$<$member.name>, rhs.$<$member.name>);$<endjoin>
    }

    $<endif>$''$+
    $<if $inlineGetters == False>
        $<join for member in $t.members>
            $<if $getters>
    $<$rescope($member.type)> $<$rescope($t)>::get_$<$member.name>() && { return $<$member.name>; }
                $<if $constGetters>
    $<$const($rescope($member.type))> & $<$rescope($t)>::get_$<$member.name>() const & { return $<$member.name>; }
                $<endif>
                $<if $nonConstGetters>
    $<$rescope($member.type)> & $<$rescope($t)>::get_$<$member.name>() & { return $<$member.name>; }
                $<endif>
            $<endif>
        $<endjoin>

    $<endif>$''$+
    $<if $inlineSetters == False>
        $<join for member in $type.members>
            $<if $setByCopy>
    void $<$rescope($t)>::set_$<$member.name>($<$const($rescope($member.type))> & new_$<$member.name>) { $+
                $<if $copyByCopySwap>using std::swap; swap($<$member.name>, new_$<$member.name>);$+
                $<else>$<$member.name> = new_$<$member.name>;$+
                $<endif> }
            $<endif>
            $<if $setByMove>
    void $<$rescope($t)>::set_$<$member.name>($<$rescope($member.type)> && new_$<$member.name>) noexcept { $+
                $<if $moveByCopySwap>using std::swap; swap($<$member.name>, new_$<$member.name>);$+
                $<else>$<$member.name> = std::move(new_$<$member.name>);$+
                $<endif> }
            $<endif>
        $<endjoin>

    $<endif>$''$+
    $<if 'humon' in $serializeTo>
    std::ostream & operator <<(std::ostream & out, $<$const('HumonFormat<' + $t.name + '$>')> & obj)
    {
        out << '{'$<join for member in $t.members>
            << " $<$member.name>: " << HumonFormat(obj->$<$member.name>)$<endjoin>
            << '}';
        return out;
    }

    $<endif>$''$+
    $<if 'binary' in $serializeTo>
    std::ostream & operator <<(std::ostream & out, $<$const('BinaryFormat<' + $t.name + '$>')> & obj)
    {
        out << $<join for member in $t.members>BinaryFormat(obj->$<$member.name>)$<delim>
            << $<endjoin>;
        return out;
    }

    $<endif>$''$+
    $<if $comparable>
    bool operator ==($<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs)
    {
        return $<join for member in $t.members>lhs.$<$member.name> == rhs.$<$member.name>$<delim>
            && $<endjoin>;
    }

    bool operator !=($<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs)
    {
        return !(lhs == rhs);
    }

    $<endif>$''$+
    $<if $diffable>
    Diff<$<$t.name>>::Diff() { }

    Diff<$<$rescope($t)>>::Diff($<$const($rescope($t))> & lhs, $<$const($rescope($t))> & rhs)
    $''$+   $<if len($t.members) $> 0>
    : memberDiffs($+
                $<join for member in $t.members>(lhs.$<$member.name> != rhs.$<$member.name>) << static_cast<int>(Members::$<$member.name>)$<delim> |
$tab              $<endjoin>),
$+      $<join for member in $t.members>$+
$''      $<$member.name>_diffs(lhs.$<$member.name>, rhs.$<$member.name>)$<delim>,
$<endjoin>$<endif>
    {
    }
$''$+    $<endif>
}
$<endset>


$<endout>
$<endjoin>
