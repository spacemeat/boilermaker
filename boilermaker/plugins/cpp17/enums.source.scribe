$<out $enumsSourcePath>$+

$sourceTopComment

#include "$srcToHeader/$enumsHeaderFile"
#include <iostream>

$<if 'humon' in $enumSerializeTo>
$<set scope as $sharedCodeNamespaceForCode>
namespace $sharedCodeNamespaceForCode
{
    $+
    $<join for enum in $enums>
    std::ostream & operator <<(std::ostream & out, const HumonFormat<$<$rescope($enum)>> & obj)
    {
        using enumIntType = std::underlying_type<$<$rescope($enum)>>::type;
        $+  $<if not $enumFlags>
        switch(* obj)
        {
        $+  $<join for val in $enum.bomaEnum.values>$+
        $+  $<if not $val.isDuplicate>$+
                $<if $enumIsScoped>$+
                    case $<$rescope($enum)>::$<$val.codeDecl>$+
                $<else>$+
                    case $<$rescope($val)>$+    $<#$val.fullCodeDecl>$+
                $<endif>$+
                        : out << "$<$val.name>"; break;
        $+  $<endif>$+
        $<endjoin>$+
        default: out << static_cast<enumIntType$>(* obj); break;
        }$<else>
        enumIntType bits = static_cast<enumIntType$>(* obj);
        out << "[";
        $+  $<join for val in $enum.bomaEnum.values>$+
        if (bits & static_cast<enumIntType>($+
            $<if $enumIsScoped>$+
                $<$rescope($enum)>::$<$val.codeDecl>$+
            $<else>$+
                $<$rescope($val)>$+
            $<endif>$+
        ))
        {
            out << " $<$val.name>";
            bits &= ~static_cast<enumIntType>($+
            $<if $enumIsScoped>$+
                $<$rescope($enum)>::$<$val.codeDecl>$+
            $<else>$+
                $<$rescope($val)>$+
            $<endif>$+
            );
            if (! bits)
                { goto done; }
        }
        $<endjoin>
    done:
        out << " ]";$<endif>

        return out;
    }
$<endjoin $<# enum >>
}
$<endset>
$<endif $<# humon >>
$<endout>
