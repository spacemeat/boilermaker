$<out $enumsSourcePath>$+

$sourceTopComment

#include "../../inc/boma/enums.hpp"
#include <iostream>

$<if 'humon' in $serializeTo>
namespace $namespace
{
    $+
    $<join for enum in $enums>
    std::ostream & operator <<(std::ostream & out, const HumonFormat<$<$enum.codeDecl > > & obj)
    {
        using enumIntType = std::underlying_type<$<$enum.codeDecl> >::type;
        $<if not $enum.flags>
        switch(* obj)
        {
        $+  $<join for val in $enum.vals>$+
        $<if not $val.isDuplicate>$+
        case $<$val.codeDecl>: out << "$<$val.bomaName>"; break;$+
        $<endif>$+
        $<endjoin>
        default: out << static_cast<enumIntType$>(* obj); break;
        }$<else>
        enumIntType bits = static_cast<enumIntType$>(* obj);
        out << "[";

        $+  $<join for val in $enum.vals>
        if (bits & static_cast<enumIntType>($<$val.codeDecl>))
        {
            out << " $<$val.bomaName>";
            bits &= ~static_cast<enumIntType>($<$val.codeDecl>);
            if (! bits)
                { goto done; }
        }$+
        $<endjoin>
    done:
        out << " ]";

        return out;$<endif>
    }
$<endjoin $<# enum >>
}
$<endif $<# humon >>
$<endout>
