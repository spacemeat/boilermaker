$<if $diffable>
$<out $diffsHeaderPath>$+
#pragma once

$headerTopComment

#include <bitset>
$+  $<join for type in vars($std)>
    $<if $type.usedInBomaType> $<#TODO: we're heavy handed with this includes>
        $<join for inc in $type.include>
$''#include $inc
$+        $<endjoin>
$+  $<endif>
$<endjoin>$''
namespace $namespace
{
    template <class StructType>
    struct Diff
    {
        Diff() : memberDiffs(false) { }

        Diff($<$const('StructType')> & lhs, $<$const('StructType')> & rhs)
        : memberDiffs(lhs != rhs)
        { }

        bool memberDiffs = false;
    };

    $+  $<if $std.array.usedInBomaType>
    template <class T, std::size_t Size>
    struct Diff<std::array<T, Size>>
    {
        Diff() { }

        Diff($<$const('std::array<T, Size$>')> & lhs, $<$const('std::array<T, Size$>')> & rhs)
        {
            for (std::size_t i = 0; i < lhs.size(); ++i)
            {
                if (lhs[i] != rhs[i])
                {
                    elementDiffs.emplace_back(i, Diff<T> { lhs[i], rhs[i] });
                }
            }
        }

        std::vector<std::pair<std::size_t, Diff<T>>> elementDiffs;
    };
$<endif>
    $+  $<if $std.pair.usedInBomaType>
    template <class TF, class TS>
    struct Diff<std::pair<TF, TS>>
    {
        Diff() { }

        Diff($<$const('std::pair<TF, TS$>')> & lhs, $<$const('std::pair<TF, TS$>')> & rhs)
        : memberDiffs((lhs.first != rhs.first) << 0 | (lhs.second != rhs.second) << 1),
          diffObjects(Diff<TF>(lhs.first, rhs.first), Diff<TS>(lhs.second, rhs.second))
        { }

        std::bitset<2> memberDiffs;
        std::pair<Diff<TF>, Diff<TS>> diffObjects;
    };
$<endif>
    $+  $<if $std.tuple.usedInBomaType>
    $<# Calls func with tuple element. https://stackoverflow.com/questions/28997271/c11-way-to-index-tuple-at-runtime-without-using-switch >
    template <class Func, class Tuple, size_t N = 0>
    void setCompareBit(Func func, $<$const('Tuple')> & tup0, $<$const('Tuple')> & tup1, size_t idx)
    {
        if (N == idx)
        {
            std::invoke(func, std::get<N>(tup0), std::get<N>(tup1), idx);
            return;
        }

        if constexpr (N + 1 < std::tuple_size_v<Tuple>)
        {
            return setCompareBit<Func, Tuple, N + 1>(func, tup0, tup1, idx);
        }
    }

    template <class ... Args>
    struct Diff<std::tuple<Args...>>
    {
        Diff() { }

        Diff($<$const('std::tuple<Args...$>')> & lhs, $<$const('std::tuple<Args...$>')> & rhs)
        : diffObjects { Diff<Args>(std::get<Args>(lhs), std::get<Args>(rhs))... }
        {
            for (std::size_t i = 0; i < sizeof...(Args); ++i)
            {
                setCompareBit(
                    [this]($<$const('auto')> & a, $<$const('auto')> & b, std::size_t idx)
                        { memberDiffs[idx] = a != b; },
                    lhs, rhs, i);
            }
        }

        std::bitset<sizeof...(Args)> memberDiffs;
        std::tuple<Diff<Args>...> diffObjects;
    };
$<endif>
    $+  $<if $std.vector.usedInBomaType>
    template <class T>
    struct Diff<std::vector<T>>
    {
        enum class DiffKind { added, replaced, removed };

        Diff() { }

        Diff($<$const('std::vector<T$>')> & lhs, $<$const('std::vector<T$>')> & rhs)
        {
            for (std::size_t i = 0; i < lhs.size(); ++i)
            {
                if (rhs.size() >= i)
                {
                    if (lhs[i] != rhs[i])
                    {
                        elementDiffs.emplace_back(i, DiffKind::replaced, Diff<T>(lhs[i], rhs[i]));
                    }
                }
                else
                {
                    elementDiffs.emplace_back(i, DiffKind::removed, Diff<T>());
                }
            }

            for (std::size_t i = lhs.size(); i < rhs.size(); ++i)
            {
                elementDiffs.emplace_back(i, DiffKind::added, Diff<T>());
            }
        }

        std::vector<std::tuple<std::size_t, DiffKind, Diff<T>>> elementDiffs;
    };
$<endif>
    $+  $<if $std.set.usedInBomaType>
    template <class T>
    struct Diff<std::set<T>>
    {
        enum class DiffKind { added, removed };

        Diff() { }

        Diff($<$const('std::set<T$>')> & lhs, $<$const('std::set<T$>')> & rhs)
        {
            // figure out diffs in maps
            for ($<$const('auto')> & lelem : lhs)
            {
                if (auto it = rhs.find(lelem); it == rhs.end())
                {
                    elementDiffs.emplace_back(lelem, DiffKind::removed, Diff<T> ());
                }
            }

            // figure out diffs in maps
            for ($<$const('auto')> & relem : rhs)
            {
                if (auto it = lhs.find(relem); it == lhs.end())
                {
                    elementDiffs.emplace_back(relem, DiffKind::added, Diff<T> ());
                }
            }
        }

        std::vector<std::tuple<T, DiffKind, Diff<T>>> elementDiffs;
    };
$<endif>
    $+  $<if $std.unorderedSet.usedInBomaType>
    template <class T>
    struct Diff<std::unordered_set<T>>
    {
        enum class DiffKind { added, removed };

        Diff() { }

        Diff($<$const('std::unordered_set<T$>')> & lhs, $<$const('std::unordered_set<T$>')> & rhs)
        {
            // figure out diffs in maps
            for ($<$const('auto')> & lelem : lhs)
            {
                if (auto it = rhs.find(lelem); it == rhs.end())
                {
                    elementDiffs.emplace_back(lelem, DiffKind::removed, Diff<T> ());
                }
            }

            // figure out diffs in maps
            for ($<$const('auto')> & relem : rhs)
            {
                if (auto it = lhs.find(relem); it == lhs.end())
                {
                    elementDiffs.emplace_back(relem, DiffKind::added, Diff<T> ());
                }
            }
        }

        std::vector<std::tuple<T, DiffKind, Diff<T>>> elementDiffs;
    };
$<endif>
    $+  $<if $std.map.usedInBomaType>
    template <class Key, class T>
    struct Diff<std::map<Key, T>>
    {
        enum class DiffKind { added, replaced, removed };

        Diff() { }

        Diff($<$const('std::map<Key, T$>')> & lhs, $<$const('std::map<Key, T$>')> & rhs)
        {
            // figure out diffs in maps
            for ($<$const('auto')> & lkvp : lhs)
            {
                if (auto it = rhs.find(lkvp.first); it == rhs.end())
                {
                    elementDiffs.emplace_back(lkvp.first, DiffKind::removed, Diff<T> ());
                }
            }

            for ($<$const('auto')> & lkvp : lhs)
            {
                if (auto it = rhs.find(lkvp.first); it != rhs.end() &&
                    lkvp.second != it->second)
                {
                    elementDiffs.emplace_back(lkvp.first, DiffKind::replaced, Diff<T> ( lkvp.second, it->second ));
                }
            }

            for ($<$const('auto')> & rkvp : rhs)
            {
                if (auto it = lhs.find(rkvp.first); it != lhs.end() &&
                    rkvp.second != it->second)
                {
                    elementDiffs.emplace_back(rkvp.first, DiffKind::added, Diff<T> ());
                }
            }
        }

        std::vector<std::tuple<Key, DiffKind, Diff<T>>> elementDiffs;
    };
$<endif>
    $+  $<if $std.unorderedMap.usedInBomaType>
    template <class Key, class T>
    struct Diff<std::unordered_map<Key, T>>
    {
        enum class DiffKind { added, replaced, removed };

        Diff() { }

        Diff($<$const('std::unordered_map<Key, T$>')> & lhs, $<$const('std::unordered_map<Key, T$>')> & rhs)
        {
            // figure out diffs in maps
            for ($<$const('auto')> & lkvp : lhs)
            {
                if (auto it = rhs.find(lkvp.first); it == rhs.end())
                {
                    elementDiffs.emplace_back(lkvp.first, DiffKind::removed, Diff<T> ());
                }
            }

            for ($<$const('auto')> & lkvp : lhs)
            {
                if (auto it = rhs.find(lkvp.first); it != rhs.end() &&
                    lkvp.second != it->second)
                {
                    elementDiffs.emplace_back(lkvp.first, DiffKind::replaced, Diff<T> ( lkvp.second, it->second ));
                }
            }

            for ($<$const('auto')> & rkvp : rhs)
            {
                if (auto it = lhs.find(rkvp.first); it != lhs.end() &&
                    rkvp.second != it->second)
                {
                    elementDiffs.emplace_back(rkvp.first, DiffKind::added, Diff<T> ());
                }
            }
        }

        std::vector<std::tuple<Key, DiffKind, Diff<T>>> elementDiffs;
    };
$<endif>$+
}
$<endout>
$<endif>