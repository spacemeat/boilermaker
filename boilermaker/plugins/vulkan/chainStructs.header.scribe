$<out $vkChainStructsHeaderPath>$+
#pragma once

$headerTopComment

#include <vulkan/vulkan.h>
#include "common.hpp"
#include "enums.hpp"
#include <fmt/core.h>
#include <fmt/ostream.h>

$<join for header in $chainStructHeaders>$+
#include $header
$<endjoin>

namespace og
{
    struct Check
    {
        template <class T>
        static bool obeysInequality(T lhs, T rhs, abilities::op op)
        {
            switch(op)
            {
            case abilities::op::eq: return lhs == rhs;
            case abilities::op::ne: return lhs != rhs;
            case abilities::op::lt: return lhs < rhs;
            case abilities::op::gt: return lhs > rhs;
            case abilities::op::le: return lhs <= rhs;
            case abilities::op::ge: return lhs >= rhs;
            default:
                throw std::runtime_error(fmt::format("Invalid operator '{}' for criteria '{}'", HumonFormat(op), lhs));
            }
        }

        template <class T>
        static bool member(T const & member, og::abilities::op op,
                           std::string_view value)
        {
            auto const & valueConv = hu::val<T>::extract(value);
            if constexpr(std::is_enum_v<T>)
            {
                if (op == og::abilities::op::has)
                    { return (member & valueConv) == member; }
                if (op == og::abilities::op::eq)
                    { return member == valueConv; }
                if (op == og::abilities::op::ne)
                    { return member != valueConv; }
                throw std::runtime_error(fmt::format("Invalid operator {}.", HumonFormat(op)));
            }
            else
            {
                if ((op == og::abilities::op::eq && value == "true") ||
                    (op == og::abilities::op::ne && value == "false"))
                    { return member != 0; }
                if ((op == og::abilities::op::ne && value == "true") ||
                    (op == og::abilities::op::eq && value == "false"))
                    { return member == 0; }
                return obeysInequality(member, valueConv, op);
            }
        }

        static bool member(uint8_t member[VK_UUID_SIZE], og::abilities::op op,
                           std::string_view value)
        {
            if (op != og::abilities::op::eq && op != og::abilities::op::ne)
                { throw std::runtime_error(fmt::format("Invalid operator {}.", HumonFormat(op))); }

            if (value.size() != VK_UUID_SIZE * 2)
                { throw std::runtime_error("Invalid format for uint8_t[VK_UUID_SIZE]."); }

            // specially reading long hex string to match
            for (int i = 0; i < VK_UUID_SIZE; ++i)
            {
                auto toHex = [& value](char c)
                {
                    if      (c >= '0' && c <= '9') { return c -= '0'; }
                    else if (c >= 'A' && c <= 'F') { return c -= 'A'; }
                    else if (c >= 'a' && c <= 'f') { return c -= 'a'; }
                    else { throw std::runtime_error("Invalid format for uint8_t[VK_UUID_SIZE]."); }
                };

                auto h = toHex(value[i * 2]);
                auto l = toHex(value[i * 2 + 1]);
                auto val = (h << 4) + l;
                if (val != static_cast<int>(member[i]))
                    { return op == og::abilities::op::ne; }
            }

            return op != og::abilities::op::ne;
        }

        static bool member(uint8_t const member[VK_UUID_SIZE], og::abilities::op op,
                           std::string_view value)
        {
            if (op != og::abilities::op::eq && op != og::abilities::op::ne)
                { throw std::runtime_error(fmt::format("Invalid operator {}.", HumonFormat(op))); }

            if (value.size() != VK_UUID_SIZE * 2)
                { throw std::runtime_error("Invalid format for uint8_t[VK_UUID_SIZE]."); }

            // specially reading long hex string to match
            for (int i = 0; i < VK_UUID_SIZE; ++i)
            {
                auto toHex = [& value](char c)
                {
                    if      (c >= '0' && c <= '9') { return c -= '0'; }
                    else if (c >= 'A' && c <= 'F') { return c -= 'A'; }
                    else if (c >= 'a' && c <= 'f') { return c -= 'a'; }
                    else { throw std::runtime_error("Invalid format for uint8_t[VK_UUID_SIZE]."); }
                };

                auto h = toHex(value[i * 2]);
                auto l = toHex(value[i * 2 + 1]);
                auto val = (h << 4) + l;
                if (val != static_cast<int>(member[i]))
                    { return op == og::abilities::op::ne; }
            }

            return op != og::abilities::op::ne;
        }

        static bool member(char member[VK_MAX_DRIVER_NAME_SIZE],
                           og::abilities::op op, std::string_view value)
        {
            if (op != og::abilities::op::eq && op != og::abilities::op::ne)
                { throw std::runtime_error(fmt::format("Invalid operator {}.", HumonFormat(op))); }

            if (std::string_view(member) != value)
                { return op == og::abilities::op::ne; }

            return op != og::abilities::op::ne;
        }

        static bool member(char const member[VK_MAX_DRIVER_NAME_SIZE],
                           og::abilities::op op, std::string_view value)
        {
            if (op != og::abilities::op::eq && op != og::abilities::op::ne)
                { throw std::runtime_error(fmt::format("Invalid operator {}.", HumonFormat(op))); }

            if (std::string_view(member) != value)
                { return op == og::abilities::op::ne; }

            return op != og::abilities::op::ne;
        }
    };

    $<join for struct in $structureChains>$+

    $<if $struct.hasSetters>$+

    $<$struct.baseProviderStructName> operator | ($<$struct.baseProviderStructName> const & lhs, $<$struct.baseProviderStructName> const & rhs);

    $<join for member in $struct.chainStructs>$+
    $<$member.structName> operator | ($<$member.structName> const & lhs, $<$member.structName> const & rhs);
    $<endjoin>
    $<endif>
    $<endjoin>

    $<join for struct in $structureChains>$+

    struct $<$struct.name>
    {
        void resetPnext()
        {
            void ** ppNext = & mainStruct.pNext;
            * ppNext = nullptr;
            $<join for member in $struct.chainStructs>$+
            if ($<$member.providerName>) { * ppNext = $<$member.providerName>.get(); ppNext = & $<$member.providerName>->pNext; * ppNext = nullptr; }$<delim>
            $<endjoin>
        }

        $<$struct.name>()
        {
        }

        $<$struct.name>($<$struct.mainStructName> const & mainStruct_rhs)
        : mainStruct { mainStruct_rhs }
        {
            resetPnext();
        }

        $<$struct.name>($<$struct.name> const & rhs)
        : mainStruct(rhs.mainStruct),
          $<join for member in $struct.chainStructs>$+
          $<$member.providerName>(rhs.$<$member.providerName> ? new $<$member.structName> { * rhs.$<$member.providerName> } : nullptr)$<delim>,
          $<endjoin>
        {
            resetPnext();
        }

        $<$struct.name>($<$struct.name> && rhs)
        : mainStruct(std::move(rhs.mainStruct)),
          $<join for member in $struct.chainStructs>$+
          $<$member.providerName>(std::move(rhs.$<$member.providerName>))$<delim>,
          $<endjoin>
        {
            resetPnext();
        }

        $<$struct.name> & operator =($<$struct.name> const & rhs)
        {
            if (this != & rhs)
            {
                mainStruct = rhs.mainStruct;
                $<join for member in $struct.chainStructs>$+
                $<$member.providerName> = std::unique_ptr<$<$member.structName>> { rhs.$<$member.providerName> ? new $<$member.structName> { * rhs.$<$member.providerName> } : nullptr };$<delim>
                $<endjoin>
                resetPnext();
            }
            return * this;
        }

        $<$struct.name> & operator =($<$struct.name> && rhs)
        {
            if (this != & rhs)
            {
                mainStruct = std::move(rhs.mainStruct);
                $<join for member in $struct.chainStructs>$+
                $<$member.providerName> = std::move(rhs.$<$member.providerName>);$<delim>
                $<endjoin>
                resetPnext();
            }
            return * this;
        }

        void init(std::vector<std::string_view> const & providers)
        {
            void ** ppNext = & mainStruct.pNext;
            for (auto const & provider : providers)
            {
                if      (provider == "$<$struct.baseProviderName>") { continue; }
                $<join for member in $struct.chainStructs>$+
                else if (provider == "$<$member.providerName>") { if ($<$member.providerName>) { continue; } $<$member.providerName> = std::unique_ptr<$<$member.structName>>(new $<$member.structName> { $<$member.sType> }); *ppNext = & (* $<$member.providerName>); ppNext = & $<$member.providerName>->pNext; }
                $<endjoin>$+
                else { throw std::runtime_error(fmt::format("$<$struct.name> init(): invalid provider {}", provider)); }
            }
        }

        $<$struct.name> copyAndReset() const
        {
            $<$struct.name> newCh { mainStruct };

            void ** ppNext = & newCh.mainStruct.pNext;

            VkBaseOutStructure * pThisNext = static_cast<VkBaseOutStructure *>(mainStruct.pNext);
            while (pThisNext != nullptr)
            {
                switch(pThisNext->sType)
                {
                $<join for member in $struct.chainStructs>$+
                case $<$member.sType>: { newCh.$<$member.providerName> = std::unique_ptr<$<$member.structName>>(new $<$member.structName> { $<$member.sType> }); *ppNext = & (* newCh.$<$member.providerName>); ppNext = & newCh.$<$member.providerName>->pNext; break; }
                $<endjoin>$+
                }
                pThisNext = pThisNext->pNext;
            }

            return newCh;
        }

        template <class struc>
        bool check(struc member) const
        {
            return check(member, og::abilities::op::eq, "true");
        }

        bool check(std::string_view providerName,
                   std::string_view featureName) const
        {
            return check(providerName, featureName, og::abilities::op::eq, "true");
        }

        bool check(std::string_view providerName,
                   std::string_view memberName,
                   og::abilities::op op,
                   std::string_view value) const
        {
            if      (providerName == "$<$struct.baseProviderName>") { return check(hu::val<$<$struct.baseProviderStructName>_members>::extract(memberName), op, value); }
            $<join for member in $struct.chainStructs>$+
            else if (providerName == "$<$member.providerName>") { return check(hu::val<$<$member.structName>_members>::extract(memberName), op, value); }
            $<endjoin>$+
            else { throw std::runtime_error(fmt::format("$<$struct.name> check(): invalid provider {}", providerName)); }
            return false;
        }

        bool check($<$struct.baseProviderStructName>_members member,
                   og::abilities::op op,
                   std::string_view value) const
        {
            switch (member)
            {
            $<join for providerMember in $enumVals($struct.baseProviderStructName)>$+
            case $<$struct.baseProviderStructName>_members::$<$toMemberName($providerMember)>: return Check::member(mainStruct.$<$struct.baseProviderMemberName>.$<$toReference($providerMember)>, op, value);
            $<endjoin>$+
            }
            return false;
        }

        $<join for struc in $struct.chainStructs>$+
        bool check($<$struc.structName>_members member,
                   og::abilities::op op,
                   std::string_view value) const
        {
            auto const & chainStructUp = $<$struc.providerName>;
            if (chainStructUp == nullptr)
                { return false; }

            switch (member)
            {
            $<join for providerMember in $enumVals($struc.structName)>$+
            case $<$struc.structName>_members::$<$toMemberName($providerMember)>: return Check::member(chainStructUp->$<$toReference($providerMember)>, op, value);
            $<endjoin>$+
            }
            return false;
        }

        $<endjoin>$+

        $<if $struct.hasSetters>

        void set(std::string_view providerName,
                 std::string_view memberName,
                 VkBool32 value)
        {
            if      (providerName == "$<$struct.baseProviderName>") { set(hu::val<$<$struct.baseProviderStructName>_members>::extract(memberName), value); }
            $<join for member in $struct.chainStructs>$+
            else if (providerName == "$<$member.providerName>") { set(hu::val<$<$member.structName>_members>::extract(memberName), value); }
            $<endjoin>$+
            else { throw std::runtime_error(fmt::format("$<$struct.name> check(): invalid provider {}", providerName)); }
        }

        void set($<$struct.baseProviderStructName>_members member,
                 VkBool32 value)
        {
            switch (member)
            {
            $<join for providerMember in $enumVals($struct.baseProviderStructName)>$+
            case $<$struct.baseProviderStructName>_members::$<$toMemberName($providerMember)>: mainStruct.$<$struct.baseProviderMemberName>.$<$toReference($providerMember)> = value; break;
            $<endjoin>$+
            }
        }

        $<join for struc in $struct.chainStructs>$+
        void set($<$struc.structName>_members member,
                 VkBool32 value)
        {
            auto const & chainStructUp = $<$struc.providerName>;
            switch (member)
            {
            $<join for providerMember in $enumVals($struc.structName)>$+
            case $<$struc.structName>_members::$<$toMemberName($providerMember)>: chainStructUp->$<$toReference($providerMember)> = value; break;
            $<endjoin>$+
            }
        }

        $<endjoin>$+

        friend $<$struct.name> operator | ($<$struct.name> const & lhs, $<$struct.name> const & rhs)
        {
            $<$struct.name> newCh = lhs.copyAndReset();
            newCh.mainStruct.$<$struct.baseProviderMemberName> = lhs.mainStruct.$<$struct.baseProviderMemberName> | rhs.mainStruct.$<$struct.baseProviderMemberName>;

            void ** ppNext = & newCh.mainStruct.pNext;

            VkBaseOutStructure * pThisNext = static_cast<VkBaseOutStructure *>(lhs.mainStruct.pNext);
            while (pThisNext != nullptr)
            {
                switch(pThisNext->sType)
                {
                $<join for member in $struct.chainStructs>$+
                case $<$member.sType>: { newCh.$<$member.providerName> = std::unique_ptr<$<$member.structName>>(new $<$member.structName> { * lhs.$<$member.providerName>.get() | * rhs.$<$member.providerName>.get() } ); *ppNext = & (* newCh.$<$member.providerName>); ppNext = & newCh.$<$member.providerName>->pNext; break; }
                $<endjoin>$+
                }
                pThisNext = pThisNext->pNext;
            }

            return newCh;
        }

        $<endif>$+

        $<$struct.mainStructName> mainStruct = { $<$struct.mainStructStype> };
        $<join for struc in $struct.chainStructs>$+
        std::unique_ptr<$<$struc.structName>$> $<$struc.providerName>;
        $<endjoin>
    };

    $<endjoin>
}

$<endout>
