@{ app: boma, boma-version: 0.0.4 }
{
    inherit: boilermaker

    targetLanguage: c++
    computeEnums:   true
    computeTypes:   true

    const:          west
    outputForm:     headerOnly  // or compiled
    cavepersonCtrs: false

    mainHeaderTopComment: ^^

/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes.

    #include this header in your project to use boilermaker-generated code.*/
^^
    headerTopComment: ^^

/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^
    inlineTopComment: ^^

/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^
    sourceTopComment: ^^

/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^

    deserializeFrom: [humon, binary]
    defaultConstructible: false
    memberwiseConstructible: false
    virtualDestructor: false
    copyable: true
    movable: true
    getters: true
    inlineGetters: true     // requires getters
    constGetters: true      // requires getters
    nonConstGetters: true   // requires getters, privateMembers
    setters: true       // requires copyable
    inlineSetters: true // requires setters
    setByCopy: true
    setByMove: true   // requires movable
    privateMembers: true
    serializeTo: [humon, binary]
    comparable: true
    diffable: true  // requires comparable

    variants: {
        gnu: {
            tools: gnu
        }
        clang: {
            tools: clang
        }
    }

    headerDir:              $<baseDir>/gen-cpp/inc/boma
    inlineDir:              $<baseDir>/gen-cpp/inc/boma/inl
    sourceDir:              $<baseDir>/gen-cpp/src/boma
    mainHeaderFile:         $<namespace>.hpp
    commonHeaderFile:       common.hpp
    commonSourceFile:       common.cpp
    diffsHeaderFile:        diffs.hpp
    enumHeaderFile:         enums.hpp
    enumInlineFile:         enums.inl.hpp
    enumSourceFile:         enums.cpp
    typeHeaderFile:         $<type>.hpp
    typeInlineFile:         $<type>.inl.hpp
    typeSourceFile:         $<type>.cpp
    containersHeaderFile:   containers.hpp
    containersInlineFile:   containers.inl.hpp
    containersSourceFile:   containers.cpp

    output: {
        headerOnly: {           // outputForm
            mainHeader: {       // kind
                sourcePath: $<defsDir>/$<headerDir>/$<mainHeaderFile>
                sections:
                [
                    pragma          // section
                    mainHeaderTopComment
                    mainHeaderIncludes
                    bomaStreamClass
                    mainHeaderLocalIncludes
                ]
            }

            enumHeader: {
                sourcePath: $<defsDir>/$<headerDir>/$<enumHeaderFile>
                sections: [
                    pragma
                    headerTopComment
                    enumHeaderIncludes
                    enumHeaderForwardDecls
                    enumDeserializerDefs
                    namespaceOpen
                    enumSerializerDecls
                    namespaceClose
                    enumHeaderIncludeInline
                ]
            }

            enumSource: {
                sourcePath: $<defsDir>/$<inlineDir>/$<enumInlineFile>
                sections: [
                    pragma
                    inlineTopComment
                    enumSourceIncludes
                    namespaceOpen
                    enumSerializerDefs
                    namespaceClose
                ]
            }

            typeHeader: {
                sourcePath: $<defsDir>/$<headerDir>/$<typeHeaderFile>
                sections: [
                    pragma
                    headerTopComment
                    $<type>|typeHeaderIncludes
                    $<type>|typeHeaderLocalIncludes
                    allTypeForwardDecls
                    namespaceStdOpen
                    $<type>|stdForwardDecls
                    namespaceClose
                    namespaceOpen
                    $<type>|containerDifferDecl
                    $<type>|forwardClassDecl
                    $<type>|forwardDecls
                    $<type>|classBegin
                    $<type>|defaultCtrDecl
                    $<type>|memberwiseCtrDecl
                    $<type>|humonCtrDecl
                    $<type>|copyCtrDecl
                    $<type>|moveCtrDecl
                    $<type>|copyAssignDecl
                    $<type>|moveAssignDecl
                    $<type>|destructorDecl
                    $<type>|swapDecl
                    $<type>|memberGettersDecl
                    $<type>|memberSettersDecl
                    $<type>|memberSetMoversDecl
                    $<type>|serializerDecl
                    $<type>|comparatorDecl
                    $<type>|differDecl
                    $<type>|members
                    $<type>|classEnd
                    $<type>|typeSerializerDecls
                    $<type>|containerSerializerDecls
                    namespaceClose
                    $<type>|typeDeserializerDef
                    $<type>|typeDeserializerDefs
                    $<type>|typeHeaderIncludeInline
                ]
            }

            typeSource: {
                sourcePath: $<defsDir>/$<inlineDir>/$<typeInlineFile>
                sections: [
                    pragma
                    inlineTopComment
                    $<type>|typeSourceIncludes
                    $<type>|typeSourceLocalIncludes
                    namespaceOpen
                    $<type>|containerDifferDef
                    $<type>|defaultCtrDef
                    $<type>|memberwiseCtrDef
                    $<type>|humonCtrDef
                    $<type>|copyCtrDef
                    $<type>|moveCtrDef
                    $<type>|copyAssignDef
                    $<type>|moveAssignDef
                    $<type>|destructorDef
                    $<type>|swapDef
                    $<type>|memberGettersDef
                    $<type>|memberSettersDef
                    $<type>|memberSetMoversDef
                    $<type>|serialzierDef
                    $<type>|comparatorDef
                    $<type>|differDef
                    $<type>|typeSerializerDefs
                    namespaceClose
                ]
            }
        }

        compiled: {           // outputForm
            mainHeader: {       // kind
                sourcePath: $<headerDir>/$<mainHeaderFile>
                sourceKind: header
                sections: [
                    pragma          // section
                    mainHeaderTopComment
                    forwardDecls
                    mainHeader|includes
                    bomaStreamClass
                    mainHeaderLocalIncludes
                ]
            }

            commonHeader: {
                sourcePath: $<headerDir>/$<commonHeaderFile>
                sourceKind: header
                sections: [
                    pragma
                    headerTopComment
                    commonHeader|includes
                    namespaceOpen
                    isLessDecl
                    variantTypeNames
                    
                    deserializerFormatWrapperBase
                    deserializerFormatWrappersDecl                    
                    namespaceClose
                    namespaceHuOpen
                    humon|deserializersDecl
                    namespaceClose
                    namespaceOpen
                    binary|deserializersDecl

                    serializerFormatWrapperBase
                    serializerFormatWrappersDecl
                    humon|serializersDecl
                    binary|serializersDecl
                    namespaceClose
                ]
            }

            commonSource: {
                sourcePath: $<sourceDir>/$<commonSourceFile>
                sourceKind: compiled
                sections: [
                    sourceTopComment
                    commonSource|includes
                    namespaceOpen
                    isLessDef
                    namespaceClose
                    namespaceHuOpen
                    deserializersDef
                    namespaceClose
                    namespaceOpen
                    serializerFormatWrappersDef
                    binary|serializersDef
                    namespaceClose
                ]
            }

            diffsHeader: {
                sourcePath: $<headerDir>/$<diffsHeaderFile>
                sourceKind: header
                sections: [
                    pragma
                    headerTopComment
                    diffsHeader|includes
                    namespaceOpen
                    diffTemplateDecl
                    diffArray
                    diffPair
                    diffTuple
                    diffVector
                    diffSet
                    diffUnorderedSet
                    diffMap
                    diffUnorderedMap
                    namespaceClose
                ]
            }

            enumHeader: {
                sourcePath: $<headerDir>/$<enumHeaderFile>
                sourceKind: header
                sections: [
                    pragma
                    headerTopComment
                    enumHeader|includes
                    enumHeaderForwardDecls
                    namespaceHuOpen
                    enumDeserializerDecls
                    namespaceClose
                    namespaceOpen
                    enumSerializerDecls
                    namespaceClose
                ]
            }

            enumSource: {
                sourcePath: $<sourceDir>/$<enumSourceFile>
                sourceKind: compiled
                sections: [
                    sourceTopComment
                    enumSource|includes
                    enumDeserializerDefs
                    namespaceOpen
                    enumSerializerDefs
                    namespaceClose
                ]
            }

            $<type>|typeHeader: {
                sourcePath: $<headerDir>/$<typeHeaderFile>
                sourceKind: header
                sections: [
                    pragma
                    headerTopComment
                    $<type>|typeHeader|includes
                    namespaceOpen
                    $<type>|containerDifferDecl
                    $<type>|forwardClassDecl
                    $<type>|forwardDecls
                    $<type>|isLessCode
                    $<type>|differDecl
                    $<type>|classBegin
                    $<type>|defaultCtrDecl
                    $<type>|memberwiseCtrDecl
                    $<type>|humonCtrDecl
                    $<type>|binaryCtrDecl
                    $<type>|copyCtrDecl
                    $<type>|moveCtrDecl
                    $<type>|copyAssignDecl
                    $<type>|moveAssignDecl
                    $<type>|destructorDecl
                    $<type>|swapDecl
                    $<type>|memberGettersDecl
                    $<type>|memberSettersDecl
                    $<type>|serializerDecl
                    $<type>|comparatorDecl
                    $<type>|diffFriendDecls
                    $<type>|members
                    $<type>|classEnd
                    $<type>|typeSerializerDecls
                    $<type>|containerSerializerDecls
                    namespaceClose
                    namespaceHuOpen
                    $<type>|typeDeserializerDef
                    $<type>|containerDeserializerDefs
                    namespaceClose
                ]
            }

            $<type>|typeSource: {
                sourcePath: $<sourceDir>/$<typeSourceFile>
                sourceKind: compiled
                sections: [
                    sourceTopComment
                    $<type>|typeSource|includes
                    namespaceOpen
                    $<type>|containerDifferDef
                    $<type>|defaultCtrDef
                    $<type>|memberwiseCtrDef
                    $<type>|humonCtrDef
                    $<type>|binaryCtrDef
                    $<type>|copyCtrDef
                    $<type>|moveCtrDef
                    $<type>|copyAssignDef
                    $<type>|moveAssignDef
                    $<type>|destructorDef
                    $<type>|swapDef
                    $<type>|memberGettersDef
                    $<type>|memberSettersDef
                    $<type>|memberSetMoversDef
                    $<type>|serialzierDef
                    $<type>|comparatorDef
                    $<type>|differDef
                    $<type>|containerSerializerDefs
                    //$<type>|typeSerializerDef
                    namespaceClose
                ]
            }
        }
    }
}
