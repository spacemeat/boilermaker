@{ app: boma, boma-version: 0.0.4 }
{
    inherit: boilermaker

    targetLanguage: c++
    computeEnums:   true
    computeTypes:   true

    const:          west
    noexcept:       false
    outputForm:     headerOnly  // or compiled
    cavepersonCtrs: false

    headerTopComment: ^^
/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^
    sourceTopComment: ^^
/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^
    inlineTopComment: ^^
/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^

    defaultConstructible: false
    memberwiseConstructible: false
    virtualDestructor: false
    nullVariant: default // or throw
    copyable: true
    movable: true
    getters: true
    nonConstGetters: true   // requires getters, privateMembers
    setters: true       // requires copyable
    setByMovers: true   // requires movable
    privateMembers: true
    deserializeFromHumon: true   // requires movable
    deserializeFromBinary: false
    serializeToHumon: true
    serializeToBinary: false
    comparable: true
    diffable: true  // requires comparable

    variants: {
        gnu: {
            tools: gnu
        }
        clang: {
            tools: clang
        }
    }

    headerDir:      inc/boma
    sourceDir:      src/boma
    inlineDir:      inc/boma/inl
    mainHeaderFile:             $<namespace>.hpp
    enumHeaderFile:         enums.hpp
    enumInlineFile:         enums.inl.hpp
    enumSourceFile:         enums.cpp
    typeHeaderFile:             $<type>.hpp
    typeInlineFile:             $<type>.inl.hpp
    typeSourceFile:             $<type>.cpp
    containersHeaderFile:   containers.hpp
    containersInlineFile:   containers.inl.hpp
    containersSourceFile:   containers.cpp

    output: {
        headerOnly: {           // outputForm
            mainHeader: {       // kind
                sourcePath: $<defsDir>/$<headerDir>/$<mainHeaderFile>
                sections:
                [
                    pragma          // section
                    mainHeaderTopComment
                    mainHeaderIncludes
                    bomaStreamClass
                    mainHeaderLocalIncludes
                ]
            }

            enumHeader: {
                sourcePath: $<defsDir>/$<headerDir>/$<enumHeaderFile>
                sections: [
                    pragma
                    inlineTopComment
                    enumHeaderIncludes
                    enumHeaderForwardDecls
                    enumDeserializerDefs
                    namespaceOpen
                    enumSerializerDecls
                    namespaceClose
                    enumHeaderIncludeInline
                ]
            }

            enumSource: {
                sourcePath: $<defsDir>/$<inlineDir>/$<enumInlineFile>
                sections: [
                    pragma
                    inlineTopComment
                    enumSourceIncludes
                    namespaceOpen
                    enumSerializerDefs
                    namespaceClose
                ]
            }

            typeHeader: {
                sourcePath: $<defsDir>/$<headerDir>/$<typeHeaderFile>
                sections: [
                    pragma
                    inlineTopComment
                    $<type>|typeHeaderIncludes
                    $<type>|typeHeaderLocalIncludes
                    allTypeForwardDecls
                    namespaceStdOpen
                    $<type>|stdForwardDecls
                    namespaceClose
                    namespaceOpen
                    $<type>|containerDifferDecl
                    $<type>|forwardClassDecl
                    $<type>|forwardDecls
                    $<type>|classBegin
                    $<type>|defaultCtrDecl
                    $<type>|memberwiseCtrDecl
                    $<type>|humonCtrDecl
                    $<type>|copyCtrDecl
                    $<type>|moveCtrDecl
                    $<type>|copyAssignDecl
                    $<type>|moveAssignDecl
                    $<type>|destructorDecl
                    $<type>|swapDecl
                    $<type>|memberGettersDecl
                    $<type>|memberSettersDecl
                    $<type>|memberSetMoversDecl
                    $<type>|serialzierDecl
                    $<type>|comparatorDecl
                    $<type>|differDecl
                    $<type>|members
                    $<type>|classEnd
                    $<type>|typeSerializerDecls
                    namespaceClose
                    $<type>|typeDeserializerDef
                    $<type>|typeDeserializerDefs
                    $<type>|typeHeaderIncludeInline
                ]
            }

            typeSource: {
                sourcePath: $<defsDir>/$<inlineDir>/$<typeInlineFile>
                sections: [
                    pragma
                    inlineTopComment
                    $<type>|typeSourceIncludes
                    $<type>|typeSourceLocalIncludes
                    namespaceOpen
                    $<type>|containerDifferDef
                    $<type>|defaultCtrDef
                    $<type>|memberwiseCtrDef
                    $<type>|humonCtrDef
                    $<type>|copyCtrDef
                    $<type>|moveCtrDef
                    $<type>|copyAssignDef
                    $<type>|moveAssignDef
                    $<type>|destructorDef
                    $<type>|swapDef
                    $<type>|memberGettersDef
                    $<type>|memberSettersDef
                    $<type>|memberSetMoversDef
                    $<type>|serialzierDef
                    $<type>|comparatorDef
                    $<type>|differDef
                    $<type>|typeSerializerDefs
                    namespaceClose
                ]
            }

            /*
            containersHeader: {
                sourcePath: $<defsDir>/$<headerDir>/$<containersHeaderFile>
                sections: [
                    pragma
                    inlineTopComment
                    containersHeaderIncludes
                    containersHeaderLocalIncludes
                    //namespaceStdOpen
                    //containersStdForwardDecls
                    //namespaceClose
                    //namespaceHuOpen
                    //containersDeserializerDefs
                    //namespaceClose
                    namespaceOpen
                    containersSerializerDecls
                    namespaceClose
                    containersHeaderIncludeInline
                ]
            }

            containersSource: {
                sourcePath: $<defsDir>/$<inlineDir>/$<containersInlineFile>
                sections: [
                    pragma
                    inlineTopComment
                    containersSourceIncludes
                    containersSourceLocalIncludes
                    namespaceOpen
                    containersSerializerDefs
                    namespaceClose
                ]
            }
            */
        }


    }
}
