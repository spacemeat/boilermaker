@{ app: boma, boma-version: 0.0.4 }
{
    inherit: boilermaker

    targetLanguage: c++
    computeEnums:   true
    computeTypes:   true
    headerDir:      ../inc/boma
    sourceDir:      ../src/boma
    inlineDir:      ../inc/boma/inl
    mainHeaderFile:             $<namespace>-boma.hpp
    enumInlineHeaderFile:       enums.inl.hpp
    enumSourceFile:             enums.cpp
    typeInlineHeaderFile:       $<type>.inl.hpp
    typeSourceFile:             $<type>.cpp
    containersInlineHeaderFile: containers.inl.hpp
    containersSourceFile:       containers.cpp

    const:          west
    noexcept:       false
    outputForm:     headerOnly  // or library
    cavepersonCtrs: false

    headerTopComment: ^^
/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^
    sourceTopComment: ^^
/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^
    inlineTopComment: ^^
/*  THIS IS A GENERATED FILE. It is a Boilermaker artifact.
    Do not bother modifying this file, as your build process will overwrite
    your changes. */
^^

    defaultConstructible: false
    memberwiseConstructible: false
    virtualDestructor: false
    nullVariant: default // or throw
    copyable: true
    movable: true
    getters: true
    nonConstGetters: true   // requires getters, privateMembers
    setters: true       // requires copyable
    setByMovers: true   // requires movable
    privateMembers: true
    deserializeFromHumon: true   // requires movable
    deserializeFromBinary: false
    serializeToHumon: true
    serializeToBinary: false
    comparable: true
    diffable: true  // requires comparable

    variants: {
        gnu: {
            tools: gnu
        }
        clang: {
            tools: clang
        }
    }

    layout: {
        // For making a header-only library.
        headerOnly.mainHeader: [
            pragma
            mainHeaderTopComment
            mainHeaderIncludes
            mainHeaderEnumIncludes
            bomaStreamClass
            mainHeaderTypeIncludes
            typeDeserializers
        ]

        headerOnly.enumInlineSource: [
            pragma
            inlineTopComment
            enumInlineSourceIncludes
            enumSourceIncludes
            enumDeserializerDecls
            enumDeserializerDefs
            namespaceOpen
            enumSerializerDecls
            enumSerializerDefs
            namespaceClose
        ]

        headerOnly.typeInlineSource: [
            pragma
            inlineTopComment
            $<type>.typeInlineSourceIncludes
            $<type>.typeInlineSourceLocalIncludes
            namespaceOpen
            $<type>.containerDifferDecl
            $<type>.forwardClassDecl
            $<type>.forwardDecls
            $<type>.classBegin
            $<type>.defaultCtrDecl
            $<type>.memberwiseCtrDecl
            $<type>.humonCtrDecl
            $<type>.copyCtrDecl
            $<type>.moveCtrDecl
            $<type>.copyAssignDecl
            $<type>.moveAssignDecl
            $<type>.destructorDecl
            $<type>.swapDecl
            $<type>.memberGettersDecl
            $<type>.memberSettersDecl
            $<type>.memberSetMoversDecl
            $<type>.serialzierDecl
            $<type>.comparatorDecl
            $<type>.differDecl
            $<type>.members
            $<type>.classEnd

            $<type>.containerDifferDef
            $<type>.defaultCtrDef
            $<type>.memberwiseCtrDef
            $<type>.humonCtrDef
            $<type>.copyCtrDef
            $<type>.moveCtrDef
            $<type>.copyAssignDef
            $<type>.moveAssignDef
            $<type>.destructorDef
            $<type>.swapDef
            $<type>.memberGettersDef
            $<type>.memberSettersDef
            $<type>.memberSetMoversDef
            $<type>.serialzierDef
            $<type>.comparatorDef
            $<type>.differDef
            namespaceClose
        ]

        headerOnly.containersInlineSource: [
            pragma
            inlineTopComment
            containersInlineSourceIncludes
            containersInlineSourceLocalIncludes
            containerDeserializerDecl
            namespaceOpen
            containerSerializerDecl
            namespaceClose
            containerDeserializerDef
            namespaceOpen
            containerSerializerDef
            namespaceClose
        ]

        // For making library with .cpp sources.
        library.mainHeader: [
            pragma
            mainHeaderTopComment
            mainHeaderIncludes
            includeEnums
            namespaceOpen
            enumSerialziers
            collectionDiffers
            bomaStreamClass
            includeTypes
            collectionSerializers
            namespaceClose
            typeDeserializers
            inlineIncludes
        ]

        library.enumInlineSource: [
            pragma
            inlineTopComment
            enumInlineSourceIncludes
            enumDeserializerDecls
            enumSerializerDecls
        ]

        library.enumSource: [
            sourceTopComment
            enumSourceIncludes
            enumDeserializerDefs
            enumSerializerDefs
        ]

        library.typeInlineSource: [
            pragma
            topComment
            typeInlineSourceIncludes
            typeHeaders
        ]

        library.typeSource: [
            topComment
            typeSourceIncludes
            enumDeserializers
            collectionDeserializers
            defaultCtr
            memberwiseCtr
            humonCtr
            copyCtr
            moveCtr
            copyAssign
            moveAssign
            destructor
            swap
            memberGetters
            memberSetters
            memberSetMovers
            serialzier
            comparator
            differ
        ]
    }
}
