@{ app: boma, boma-version: 0.0.4 }
{
    inherit: [c++17, vulkan]
    tools: gnu
    outputForm: source

    namespace: txtToBin
    deserializeFrom: [humon, binary]
    serializeTo: [humon, binary]
    defaultConstructible: true      // done
    memberwiseConstructible: true   // done
    virtualDestructor: false        // done
    copyable: true                  // done
    movable: true                   // done
    getters: true                   // done
    setters: true                   // done
    privateMembers: true            // done
    comparable: true                // done
    diffable: true                  // done
    caveperson: []

    types: {
        couple: {
            a: string
            b: .VkResult
            -props: { movable: false }
        }

        v_of_couples: {
            couples: { type: vector of: couple }
        }

        v_of_a_of_couples: {
            coupleses: { type: vector of: { type: array of: [couple, 4] } }
        }

        wut: {
            huh: {
                type: vector
                of: [ {
                        type: array
                        of: [ {
                                type: optional
                                of: [ {
                                        type: variant
                                        of: [ {
                                                type: pair
                                                of: [string, string]
                                            } {
                                                type: tuple
                                                of: [size_t, int, double]
                                            } {
                                                type: map
                                                of: [string, int]
                                            } {
                                                type: unorderedMap
                                                of: [string, int]
                                            } {
                                                type: set
                                                of: [ {
                                                        type: unorderedMap
                                                        of: [int, couple]
                                                    }
                                                ]
                                                isLess: '$"return lhs.begin()->second.get_a() < rhs.begin()->second.get_a();"'
                                            } {
                                                type: unorderedSet
                                                of: string
                                            } {
                                                alias: setOfMaps
                                                type: set
                                                of: [ {
                                                        type: map
                                                        of: [float, int]
                                                        isLess: '$"return lhs < rhs;"'
                                                    }
                                                ]
                                                isLess: '$"return lhs.begin()->second < rhs.begin()->second;"'
                                            }
                                        ]
                                    }
                                ]
                            }, 4
                        ]
                    }
                ]
            }
        }
    }

}
